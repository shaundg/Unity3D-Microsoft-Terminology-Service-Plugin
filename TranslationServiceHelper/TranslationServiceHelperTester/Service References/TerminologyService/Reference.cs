//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TranslationServiceHelperTester.TerminologyService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchStringComparison", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Terminology.WebService.Index.Co" +
        "re")]
    public enum SearchStringComparison : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CaseInsensitive = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CaseSensitive = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HotKeyAndCaseSensitive = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchOperator", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Terminology.WebService.Index.Co" +
        "re")]
    public enum SearchOperator : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Exact = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Contains = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AnyWord = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="TranslationSources", Namespace="http://api.terminology.microsoft.com/terminology", ItemName="TranslationSource")]
    [System.SerializableAttribute()]
    public class TranslationSources : System.Collections.Generic.List<TranslationServiceHelperTester.TerminologyService.TranslationSource> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TranslationSource", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Terminology.WebService.Index.En" +
        "tities")]
    public enum TranslationSource : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Terms = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UiStrings = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Products", Namespace="http://api.terminology.microsoft.com/terminology", ItemName="Product")]
    [System.SerializableAttribute()]
    public class Products : System.Collections.Generic.List<TranslationServiceHelperTester.TerminologyService.Product> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    public partial class Product : TranslationServiceHelperTester.TerminologyService.EntityBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TranslationServiceHelperTester.TerminologyService.Versions VersionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TranslationServiceHelperTester.TerminologyService.Versions Versions {
            get {
                return this.VersionsField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionsField, value) != true)) {
                    this.VersionsField = value;
                    this.RaisePropertyChanged("Versions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityBase", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TranslationServiceHelperTester.TerminologyService.Version))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TranslationServiceHelperTester.TerminologyService.Language))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TranslationServiceHelperTester.TerminologyService.Product))]
    public partial class EntityBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Version", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    public partial class Version : TranslationServiceHelperTester.TerminologyService.EntityBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Language", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    public partial class Language : TranslationServiceHelperTester.TerminologyService.EntityBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Versions", Namespace="http://api.terminology.microsoft.com/terminology", ItemName="Version")]
    [System.SerializableAttribute()]
    public class Versions : System.Collections.Generic.List<TranslationServiceHelperTester.TerminologyService.Version> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Matches", Namespace="http://api.terminology.microsoft.com/terminology", ItemName="Match")]
    [System.SerializableAttribute()]
    public class Matches : System.Collections.Generic.List<TranslationServiceHelperTester.TerminologyService.Match> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Match", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    public partial class Match : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConfidenceLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginalTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<TranslationServiceHelperTester.TerminologyService.TranslationSource> SourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TranslationServiceHelperTester.TerminologyService.Translations TranslationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConfidenceLevel {
            get {
                return this.ConfidenceLevelField;
            }
            set {
                if ((this.ConfidenceLevelField.Equals(value) != true)) {
                    this.ConfidenceLevelField = value;
                    this.RaisePropertyChanged("ConfidenceLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Definition {
            get {
                return this.DefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.DefinitionField, value) != true)) {
                    this.DefinitionField = value;
                    this.RaisePropertyChanged("Definition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalText {
            get {
                return this.OriginalTextField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalTextField, value) != true)) {
                    this.OriginalTextField = value;
                    this.RaisePropertyChanged("OriginalText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Product {
            get {
                return this.ProductField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductField, value) != true)) {
                    this.ProductField = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductVersion {
            get {
                return this.ProductVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductVersionField, value) != true)) {
                    this.ProductVersionField = value;
                    this.RaisePropertyChanged("ProductVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<TranslationServiceHelperTester.TerminologyService.TranslationSource> Source {
            get {
                return this.SourceField;
            }
            set {
                if ((this.SourceField.Equals(value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TranslationServiceHelperTester.TerminologyService.Translations Translations {
            get {
                return this.TranslationsField;
            }
            set {
                if ((object.ReferenceEquals(this.TranslationsField, value) != true)) {
                    this.TranslationsField = value;
                    this.RaisePropertyChanged("Translations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Translations", Namespace="http://api.terminology.microsoft.com/terminology", ItemName="Translation")]
    [System.SerializableAttribute()]
    public class Translations : System.Collections.Generic.List<TranslationServiceHelperTester.TerminologyService.Translation> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Translation", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    public partial class Translation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TranslatedTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Language {
            get {
                return this.LanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageField, value) != true)) {
                    this.LanguageField = value;
                    this.RaisePropertyChanged("Language");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TranslatedText {
            get {
                return this.TranslatedTextField;
            }
            set {
                if ((object.ReferenceEquals(this.TranslatedTextField, value) != true)) {
                    this.TranslatedTextField = value;
                    this.RaisePropertyChanged("TranslatedText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseFault", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TranslationServiceHelperTester.TerminologyService.MissingParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TranslationServiceHelperTester.TerminologyService.InvalidParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TranslationServiceHelperTester.TerminologyService.Unexpected))]
    public partial class BaseFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MissingParameter", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    public partial class MissingParameter : TranslationServiceHelperTester.TerminologyService.BaseFault {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParameterNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterName {
            get {
                return this.ParameterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterNameField, value) != true)) {
                    this.ParameterNameField = value;
                    this.RaisePropertyChanged("ParameterName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidParameters", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    public partial class InvalidParameters : TranslationServiceHelperTester.TerminologyService.BaseFault {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Unexpected", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    public partial class Unexpected : TranslationServiceHelperTester.TerminologyService.BaseFault {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Languages", Namespace="http://api.terminology.microsoft.com/terminology", ItemName="Language")]
    [System.SerializableAttribute()]
    public class Languages : System.Collections.Generic.List<TranslationServiceHelperTester.TerminologyService.Language> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Capability", Namespace="http://api.terminology.microsoft.com/terminology")]
    [System.SerializableAttribute()]
    public partial class Capability : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SupportsAnyToAnyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SupportsAnyToEnUsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SupportsEnUsToAnyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportsAnyToAny {
            get {
                return this.SupportsAnyToAnyField;
            }
            set {
                if ((this.SupportsAnyToAnyField.Equals(value) != true)) {
                    this.SupportsAnyToAnyField = value;
                    this.RaisePropertyChanged("SupportsAnyToAny");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportsAnyToEnUs {
            get {
                return this.SupportsAnyToEnUsField;
            }
            set {
                if ((this.SupportsAnyToEnUsField.Equals(value) != true)) {
                    this.SupportsAnyToEnUsField = value;
                    this.RaisePropertyChanged("SupportsAnyToEnUs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportsEnUsToAny {
            get {
                return this.SupportsEnUsToAnyField;
            }
            set {
                if ((this.SupportsEnUsToAnyField.Equals(value) != true)) {
                    this.SupportsEnUsToAnyField = value;
                    this.RaisePropertyChanged("SupportsEnUsToAny");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://api.terminology.microsoft.com/terminology", ConfigurationName="TerminologyService.Terminology")]
    public interface Terminology {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.terminology.microsoft.com/terminology/Terminology/GetTranslations", ReplyAction="http://api.terminology.microsoft.com/terminology/Terminology/GetTranslationsRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TranslationServiceHelperTester.TerminologyService.Unexpected), Action="http://api.terminology.microsoft.com/terminology/Terminology/GetTranslationsUnexp" +
            "ectedFault", Name="Unexpected")]
        [System.ServiceModel.FaultContractAttribute(typeof(TranslationServiceHelperTester.TerminologyService.MissingParameter), Action="http://api.terminology.microsoft.com/terminology/Terminology/GetTranslationsMissi" +
            "ngParameterFault", Name="MissingParameter")]
        [System.ServiceModel.FaultContractAttribute(typeof(TranslationServiceHelperTester.TerminologyService.InvalidParameters), Action="http://api.terminology.microsoft.com/terminology/Terminology/GetTranslationsInval" +
            "idParametersFault", Name="InvalidParameters")]
        TranslationServiceHelperTester.TerminologyService.Matches GetTranslations(string text, string from, string to, TranslationServiceHelperTester.TerminologyService.SearchStringComparison sensitivity, TranslationServiceHelperTester.TerminologyService.SearchOperator searchOperator, TranslationServiceHelperTester.TerminologyService.TranslationSources sources, System.Nullable<bool> unique, int maxTranslations, bool includeDefinitions, TranslationServiceHelperTester.TerminologyService.Products products);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.terminology.microsoft.com/terminology/Terminology/GetTranslations", ReplyAction="http://api.terminology.microsoft.com/terminology/Terminology/GetTranslationsRespo" +
            "nse")]
        System.IAsyncResult BeginGetTranslations(string text, string from, string to, TranslationServiceHelperTester.TerminologyService.SearchStringComparison sensitivity, TranslationServiceHelperTester.TerminologyService.SearchOperator searchOperator, TranslationServiceHelperTester.TerminologyService.TranslationSources sources, System.Nullable<bool> unique, int maxTranslations, bool includeDefinitions, TranslationServiceHelperTester.TerminologyService.Products products, System.AsyncCallback callback, object asyncState);
        
        TranslationServiceHelperTester.TerminologyService.Matches EndGetTranslations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.terminology.microsoft.com/terminology/Terminology/GetLanguages", ReplyAction="http://api.terminology.microsoft.com/terminology/Terminology/GetLanguagesResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(TranslationServiceHelperTester.TerminologyService.Unexpected), Action="http://api.terminology.microsoft.com/terminology/Terminology/GetLanguagesUnexpect" +
            "edFault", Name="Unexpected")]
        TranslationServiceHelperTester.TerminologyService.Languages GetLanguages();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.terminology.microsoft.com/terminology/Terminology/GetLanguages", ReplyAction="http://api.terminology.microsoft.com/terminology/Terminology/GetLanguagesResponse" +
            "")]
        System.IAsyncResult BeginGetLanguages(System.AsyncCallback callback, object asyncState);
        
        TranslationServiceHelperTester.TerminologyService.Languages EndGetLanguages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.terminology.microsoft.com/terminology/Terminology/GetProducts", ReplyAction="http://api.terminology.microsoft.com/terminology/Terminology/GetProductsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TranslationServiceHelperTester.TerminologyService.Unexpected), Action="http://api.terminology.microsoft.com/terminology/Terminology/GetProductsUnexpecte" +
            "dFault", Name="Unexpected")]
        TranslationServiceHelperTester.TerminologyService.Products GetProducts();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.terminology.microsoft.com/terminology/Terminology/GetProducts", ReplyAction="http://api.terminology.microsoft.com/terminology/Terminology/GetProductsResponse")]
        System.IAsyncResult BeginGetProducts(System.AsyncCallback callback, object asyncState);
        
        TranslationServiceHelperTester.TerminologyService.Products EndGetProducts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.terminology.microsoft.com/terminology/Terminology/GetCapability", ReplyAction="http://api.terminology.microsoft.com/terminology/Terminology/GetCapabilityRespons" +
            "e")]
        TranslationServiceHelperTester.TerminologyService.Capability GetCapability();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.terminology.microsoft.com/terminology/Terminology/GetCapability", ReplyAction="http://api.terminology.microsoft.com/terminology/Terminology/GetCapabilityRespons" +
            "e")]
        System.IAsyncResult BeginGetCapability(System.AsyncCallback callback, object asyncState);
        
        TranslationServiceHelperTester.TerminologyService.Capability EndGetCapability(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TerminologyChannel : TranslationServiceHelperTester.TerminologyService.Terminology, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTranslationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTranslationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TranslationServiceHelperTester.TerminologyService.Matches Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TranslationServiceHelperTester.TerminologyService.Matches)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TranslationServiceHelperTester.TerminologyService.Languages Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TranslationServiceHelperTester.TerminologyService.Languages)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProductsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProductsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TranslationServiceHelperTester.TerminologyService.Products Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TranslationServiceHelperTester.TerminologyService.Products)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCapabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCapabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TranslationServiceHelperTester.TerminologyService.Capability Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TranslationServiceHelperTester.TerminologyService.Capability)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TerminologyClient : System.ServiceModel.ClientBase<TranslationServiceHelperTester.TerminologyService.Terminology>, TranslationServiceHelperTester.TerminologyService.Terminology {
        
        private BeginOperationDelegate onBeginGetTranslationsDelegate;
        
        private EndOperationDelegate onEndGetTranslationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTranslationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLanguagesDelegate;
        
        private EndOperationDelegate onEndGetLanguagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLanguagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProductsDelegate;
        
        private EndOperationDelegate onEndGetProductsDelegate;
        
        private System.Threading.SendOrPostCallback onGetProductsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCapabilityDelegate;
        
        private EndOperationDelegate onEndGetCapabilityDelegate;
        
        private System.Threading.SendOrPostCallback onGetCapabilityCompletedDelegate;
        
        public TerminologyClient() {
        }
        
        public TerminologyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TerminologyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TerminologyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TerminologyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetTranslationsCompletedEventArgs> GetTranslationsCompleted;
        
        public event System.EventHandler<GetLanguagesCompletedEventArgs> GetLanguagesCompleted;
        
        public event System.EventHandler<GetProductsCompletedEventArgs> GetProductsCompleted;
        
        public event System.EventHandler<GetCapabilityCompletedEventArgs> GetCapabilityCompleted;
        
        public TranslationServiceHelperTester.TerminologyService.Matches GetTranslations(string text, string from, string to, TranslationServiceHelperTester.TerminologyService.SearchStringComparison sensitivity, TranslationServiceHelperTester.TerminologyService.SearchOperator searchOperator, TranslationServiceHelperTester.TerminologyService.TranslationSources sources, System.Nullable<bool> unique, int maxTranslations, bool includeDefinitions, TranslationServiceHelperTester.TerminologyService.Products products) {
            return base.Channel.GetTranslations(text, from, to, sensitivity, searchOperator, sources, unique, maxTranslations, includeDefinitions, products);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTranslations(string text, string from, string to, TranslationServiceHelperTester.TerminologyService.SearchStringComparison sensitivity, TranslationServiceHelperTester.TerminologyService.SearchOperator searchOperator, TranslationServiceHelperTester.TerminologyService.TranslationSources sources, System.Nullable<bool> unique, int maxTranslations, bool includeDefinitions, TranslationServiceHelperTester.TerminologyService.Products products, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTranslations(text, from, to, sensitivity, searchOperator, sources, unique, maxTranslations, includeDefinitions, products, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public TranslationServiceHelperTester.TerminologyService.Matches EndGetTranslations(System.IAsyncResult result) {
            return base.Channel.EndGetTranslations(result);
        }
        
        private System.IAsyncResult OnBeginGetTranslations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string text = ((string)(inValues[0]));
            string from = ((string)(inValues[1]));
            string to = ((string)(inValues[2]));
            TranslationServiceHelperTester.TerminologyService.SearchStringComparison sensitivity = ((TranslationServiceHelperTester.TerminologyService.SearchStringComparison)(inValues[3]));
            TranslationServiceHelperTester.TerminologyService.SearchOperator searchOperator = ((TranslationServiceHelperTester.TerminologyService.SearchOperator)(inValues[4]));
            TranslationServiceHelperTester.TerminologyService.TranslationSources sources = ((TranslationServiceHelperTester.TerminologyService.TranslationSources)(inValues[5]));
            System.Nullable<bool> unique = ((System.Nullable<bool>)(inValues[6]));
            int maxTranslations = ((int)(inValues[7]));
            bool includeDefinitions = ((bool)(inValues[8]));
            TranslationServiceHelperTester.TerminologyService.Products products = ((TranslationServiceHelperTester.TerminologyService.Products)(inValues[9]));
            return this.BeginGetTranslations(text, from, to, sensitivity, searchOperator, sources, unique, maxTranslations, includeDefinitions, products, callback, asyncState);
        }
        
        private object[] OnEndGetTranslations(System.IAsyncResult result) {
            TranslationServiceHelperTester.TerminologyService.Matches retVal = this.EndGetTranslations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTranslationsCompleted(object state) {
            if ((this.GetTranslationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTranslationsCompleted(this, new GetTranslationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTranslationsAsync(string text, string from, string to, TranslationServiceHelperTester.TerminologyService.SearchStringComparison sensitivity, TranslationServiceHelperTester.TerminologyService.SearchOperator searchOperator, TranslationServiceHelperTester.TerminologyService.TranslationSources sources, System.Nullable<bool> unique, int maxTranslations, bool includeDefinitions, TranslationServiceHelperTester.TerminologyService.Products products) {
            this.GetTranslationsAsync(text, from, to, sensitivity, searchOperator, sources, unique, maxTranslations, includeDefinitions, products, null);
        }
        
        public void GetTranslationsAsync(string text, string from, string to, TranslationServiceHelperTester.TerminologyService.SearchStringComparison sensitivity, TranslationServiceHelperTester.TerminologyService.SearchOperator searchOperator, TranslationServiceHelperTester.TerminologyService.TranslationSources sources, System.Nullable<bool> unique, int maxTranslations, bool includeDefinitions, TranslationServiceHelperTester.TerminologyService.Products products, object userState) {
            if ((this.onBeginGetTranslationsDelegate == null)) {
                this.onBeginGetTranslationsDelegate = new BeginOperationDelegate(this.OnBeginGetTranslations);
            }
            if ((this.onEndGetTranslationsDelegate == null)) {
                this.onEndGetTranslationsDelegate = new EndOperationDelegate(this.OnEndGetTranslations);
            }
            if ((this.onGetTranslationsCompletedDelegate == null)) {
                this.onGetTranslationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTranslationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTranslationsDelegate, new object[] {
                        text,
                        from,
                        to,
                        sensitivity,
                        searchOperator,
                        sources,
                        unique,
                        maxTranslations,
                        includeDefinitions,
                        products}, this.onEndGetTranslationsDelegate, this.onGetTranslationsCompletedDelegate, userState);
        }
        
        public TranslationServiceHelperTester.TerminologyService.Languages GetLanguages() {
            return base.Channel.GetLanguages();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLanguages(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLanguages(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public TranslationServiceHelperTester.TerminologyService.Languages EndGetLanguages(System.IAsyncResult result) {
            return base.Channel.EndGetLanguages(result);
        }
        
        private System.IAsyncResult OnBeginGetLanguages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetLanguages(callback, asyncState);
        }
        
        private object[] OnEndGetLanguages(System.IAsyncResult result) {
            TranslationServiceHelperTester.TerminologyService.Languages retVal = this.EndGetLanguages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLanguagesCompleted(object state) {
            if ((this.GetLanguagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLanguagesCompleted(this, new GetLanguagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLanguagesAsync() {
            this.GetLanguagesAsync(null);
        }
        
        public void GetLanguagesAsync(object userState) {
            if ((this.onBeginGetLanguagesDelegate == null)) {
                this.onBeginGetLanguagesDelegate = new BeginOperationDelegate(this.OnBeginGetLanguages);
            }
            if ((this.onEndGetLanguagesDelegate == null)) {
                this.onEndGetLanguagesDelegate = new EndOperationDelegate(this.OnEndGetLanguages);
            }
            if ((this.onGetLanguagesCompletedDelegate == null)) {
                this.onGetLanguagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLanguagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLanguagesDelegate, null, this.onEndGetLanguagesDelegate, this.onGetLanguagesCompletedDelegate, userState);
        }
        
        public TranslationServiceHelperTester.TerminologyService.Products GetProducts() {
            return base.Channel.GetProducts();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProducts(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProducts(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public TranslationServiceHelperTester.TerminologyService.Products EndGetProducts(System.IAsyncResult result) {
            return base.Channel.EndGetProducts(result);
        }
        
        private System.IAsyncResult OnBeginGetProducts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetProducts(callback, asyncState);
        }
        
        private object[] OnEndGetProducts(System.IAsyncResult result) {
            TranslationServiceHelperTester.TerminologyService.Products retVal = this.EndGetProducts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProductsCompleted(object state) {
            if ((this.GetProductsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProductsCompleted(this, new GetProductsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProductsAsync() {
            this.GetProductsAsync(null);
        }
        
        public void GetProductsAsync(object userState) {
            if ((this.onBeginGetProductsDelegate == null)) {
                this.onBeginGetProductsDelegate = new BeginOperationDelegate(this.OnBeginGetProducts);
            }
            if ((this.onEndGetProductsDelegate == null)) {
                this.onEndGetProductsDelegate = new EndOperationDelegate(this.OnEndGetProducts);
            }
            if ((this.onGetProductsCompletedDelegate == null)) {
                this.onGetProductsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProductsCompleted);
            }
            base.InvokeAsync(this.onBeginGetProductsDelegate, null, this.onEndGetProductsDelegate, this.onGetProductsCompletedDelegate, userState);
        }
        
        public TranslationServiceHelperTester.TerminologyService.Capability GetCapability() {
            return base.Channel.GetCapability();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCapability(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCapability(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public TranslationServiceHelperTester.TerminologyService.Capability EndGetCapability(System.IAsyncResult result) {
            return base.Channel.EndGetCapability(result);
        }
        
        private System.IAsyncResult OnBeginGetCapability(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetCapability(callback, asyncState);
        }
        
        private object[] OnEndGetCapability(System.IAsyncResult result) {
            TranslationServiceHelperTester.TerminologyService.Capability retVal = this.EndGetCapability(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCapabilityCompleted(object state) {
            if ((this.GetCapabilityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCapabilityCompleted(this, new GetCapabilityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCapabilityAsync() {
            this.GetCapabilityAsync(null);
        }
        
        public void GetCapabilityAsync(object userState) {
            if ((this.onBeginGetCapabilityDelegate == null)) {
                this.onBeginGetCapabilityDelegate = new BeginOperationDelegate(this.OnBeginGetCapability);
            }
            if ((this.onEndGetCapabilityDelegate == null)) {
                this.onEndGetCapabilityDelegate = new EndOperationDelegate(this.OnEndGetCapability);
            }
            if ((this.onGetCapabilityCompletedDelegate == null)) {
                this.onGetCapabilityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCapabilityCompleted);
            }
            base.InvokeAsync(this.onBeginGetCapabilityDelegate, null, this.onEndGetCapabilityDelegate, this.onGetCapabilityCompletedDelegate, userState);
        }
    }
}
